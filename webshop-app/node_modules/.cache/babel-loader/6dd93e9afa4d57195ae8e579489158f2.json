{"ast":null,"code":"import React from 'react';\nimport data from '../data';\nimport { Link } from 'react-router-dom';\nexport default function Caroussel() {\n  const {\n    types\n  } = data;\n  document.addEventListener('DOMContentLoaded', () => {\n    const slideTime = 500; // const previousButton = document.querySelector('#previous');\n    // const nextButton = document.querySelector('#next');\n\n    const allSlides = [...document.querySelectorAll(\".slide\")];\n    let clickable = true;\n    let active = null;\n    let newActive = null;\n\n    function initSlider() {\n      allSlides.forEach(slide => {\n        slide.setAttribute('style', `transition: transform ${slideTime}ms ease;\n                             animation-duration: ${slideTime}ms;`);\n      });\n    }\n\n    function changeSlide(forward) {\n      if (clickable) {\n        clickable = false;\n        active = document.querySelector(\".active\");\n        const activeSlideIndex = allSlides.indexOf(active);\n\n        if (forward) {\n          // console.log(activeSlideIndex)\n          // console.log(allSlides.length)\n          // console.log((activeSlideIndex + 1) % allSlides.length)\n          newActive = allSlides[(activeSlideIndex + 1) % allSlides.length];\n          active.classList.add('slideOutLeft');\n          newActive.classList.add('slideInRight', 'active');\n        } else {\n          newActive = allSlides[(activeSlideIndex - 1 + allSlides.length) % allSlides.length];\n          active.classList.add('slideOutRight');\n          newActive.classList.add('slideInLeft', 'active');\n        }\n      }\n    }\n\n    allSlides.forEach(slide => {\n      slide.addEventListener('transitionend', () => {\n        if (slide === active && !clickable) {\n          clickable = true;\n          active.className = 'slide';\n        }\n      });\n    }); //Event Listeners - make buttons clickable\n    // nextButton.addEventListener('click', () => {\n    //     changeSlide(true);\n    // })\n    // previousButton.addEventListener('click', () => {\n    //     changeSlide(false);\n    // })\n    //Initslider making it happen\n\n    initSlider();\n  });\n}\n_c = Caroussel;\n\nvar _c;\n\n$RefreshReg$(_c, \"Caroussel\");","map":{"version":3,"sources":["/Users/joerivanmegen/Documents/TechGrounds/Webshop React/webshop-app/src/components/Caroussel.js"],"names":["React","data","Link","Caroussel","types","document","addEventListener","slideTime","allSlides","querySelectorAll","clickable","active","newActive","initSlider","forEach","slide","setAttribute","changeSlide","forward","querySelector","activeSlideIndex","indexOf","length","classList","add","className"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,SAAQC,IAAR,QAAmB,kBAAnB;AAEA,eAAe,SAASC,SAAT,GAAqB;AAChC,QAAM;AAAEC,IAAAA;AAAF,MAAYH,IAAlB;AAEAI,EAAAA,QAAQ,CAACC,gBAAT,CAA0B,kBAA1B,EAA8C,MAAM;AAChD,UAAMC,SAAS,GAAG,GAAlB,CADgD,CAEhD;AACA;;AACA,UAAMC,SAAS,GAAG,CAAC,GAAGH,QAAQ,CAACI,gBAAT,CAA0B,QAA1B,CAAJ,CAAlB;AAEA,QAAIC,SAAS,GAAG,IAAhB;AACA,QAAIC,MAAM,GAAG,IAAb;AACA,QAAIC,SAAS,GAAG,IAAhB;;AAEA,aAASC,UAAT,GAAsB;AAClBL,MAAAA,SAAS,CAACM,OAAV,CAAkBC,KAAK,IAAI;AACvBA,QAAAA,KAAK,CAACC,YAAN,CACI,OADJ,EAEK,yBAAwBT,SAAU;AACvD,mDAAmDA,SAAU,KAH7C;AAKH,OAND;AAOH;;AAED,aAASU,WAAT,CAAqBC,OAArB,EAA8B;AAC1B,UAAIR,SAAJ,EAAe;AACXA,QAAAA,SAAS,GAAG,KAAZ;AACAC,QAAAA,MAAM,GAAGN,QAAQ,CAACc,aAAT,CAAuB,SAAvB,CAAT;AACA,cAAMC,gBAAgB,GAAGZ,SAAS,CAACa,OAAV,CAAkBV,MAAlB,CAAzB;;AACA,YAAIO,OAAJ,EAAa;AACT;AACA;AACA;AAEAN,UAAAA,SAAS,GAAGJ,SAAS,CAAC,CAACY,gBAAgB,GAAG,CAApB,IAAyBZ,SAAS,CAACc,MAApC,CAArB;AACAX,UAAAA,MAAM,CAACY,SAAP,CAAiBC,GAAjB,CAAqB,cAArB;AACAZ,UAAAA,SAAS,CAACW,SAAV,CAAoBC,GAApB,CAAwB,cAAxB,EAAwC,QAAxC;AACH,SARD,MAQO;AACHZ,UAAAA,SAAS,GAAGJ,SAAS,CAAC,CAACY,gBAAgB,GAAG,CAAnB,GAAuBZ,SAAS,CAACc,MAAlC,IAA4Cd,SAAS,CAACc,MAAvD,CAArB;AACAX,UAAAA,MAAM,CAACY,SAAP,CAAiBC,GAAjB,CAAqB,eAArB;AACAZ,UAAAA,SAAS,CAACW,SAAV,CAAoBC,GAApB,CAAwB,aAAxB,EAAuC,QAAvC;AACH;AACJ;AACJ;;AACDhB,IAAAA,SAAS,CAACM,OAAV,CAAkBC,KAAK,IAAI;AACvBA,MAAAA,KAAK,CAACT,gBAAN,CAAuB,eAAvB,EAAwC,MAAM;AAC1C,YAAIS,KAAK,KAAKJ,MAAV,IAAoB,CAACD,SAAzB,EAAoC;AAChCA,UAAAA,SAAS,GAAG,IAAZ;AACAC,UAAAA,MAAM,CAACc,SAAP,GAAmB,OAAnB;AACH;AACJ,OALD;AAMH,KAPD,EAxCgD,CAiDhD;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACAZ,IAAAA,UAAU;AACb,GA3DD;AA6DH;KAhEuBV,S","sourcesContent":["import React from 'react';\nimport data from '../data';\nimport {Link} from 'react-router-dom';\n\nexport default function Caroussel() {\n    const { types } = data;\n\n    document.addEventListener('DOMContentLoaded', () => {\n        const slideTime = 500;\n        // const previousButton = document.querySelector('#previous');\n        // const nextButton = document.querySelector('#next');\n        const allSlides = [...document.querySelectorAll(\".slide\")];\n\n        let clickable = true;\n        let active = null;\n        let newActive = null;\n\n        function initSlider() {\n            allSlides.forEach(slide => {\n                slide.setAttribute(\n                    'style',\n                    `transition: transform ${slideTime}ms ease;\n                             animation-duration: ${slideTime}ms;`\n                );\n            });\n        }\n\n        function changeSlide(forward) {\n            if (clickable) {\n                clickable = false;\n                active = document.querySelector(\".active\");\n                const activeSlideIndex = allSlides.indexOf(active);\n                if (forward) {\n                    // console.log(activeSlideIndex)\n                    // console.log(allSlides.length)\n                    // console.log((activeSlideIndex + 1) % allSlides.length)\n\n                    newActive = allSlides[(activeSlideIndex + 1) % allSlides.length];\n                    active.classList.add('slideOutLeft');\n                    newActive.classList.add('slideInRight', 'active');\n                } else {\n                    newActive = allSlides[(activeSlideIndex - 1 + allSlides.length) % allSlides.length];\n                    active.classList.add('slideOutRight');\n                    newActive.classList.add('slideInLeft', 'active');\n                }\n            }\n        }\n        allSlides.forEach(slide => {\n            slide.addEventListener('transitionend', () => {\n                if (slide === active && !clickable) {\n                    clickable = true;\n                    active.className = 'slide';\n                }\n            });\n        });\n\n        //Event Listeners - make buttons clickable\n        // nextButton.addEventListener('click', () => {\n        //     changeSlide(true);\n        // })\n        // previousButton.addEventListener('click', () => {\n        //     changeSlide(false);\n        // })\n\n        //Initslider making it happen\n        initSlider();\n    })\n    \n}\n"]},"metadata":{},"sourceType":"module"}